---
version: '3'
services:
  mysql-order:
    container_name: mysql-order
    image: mysql:8.0.31
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME_ORDER}
      MYSQL_TCP_PORT: ${DB_PORT_ORDER}
    volumes:
      - order-service-data:/var/lib/mysql
      - ./initdb-script/order-service.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${DB_PORT_ORDER}:${DB_PORT_ORDER}
    env_file:
      - .env
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$MYSQL_ROOT_PASSWORD' ]
      timeout: 20s
      retries: 2

  mysql-inventory:
    container_name: mysql-inventory
    image: mysql:8.0.31
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME_INVENTORY}
      MYSQL_TCP_PORT: ${DB_PORT_INVENTORY}
    volumes:
      - inventory-service-data:/var/lib/mysql
      - ./initdb-script/inventory-service.sql:/docker-entrypoint-initdb.d/inventory-service-init.sql
    ports:
      - ${DB_PORT_INVENTORY}:${DB_PORT_INVENTORY}
    env_file:
      - .env
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$MYSQL_ROOT_PASSWORD' ]
      timeout: 20s
      retries: 2

  ## Keycloak Config with Mysql database
  mysql-keycloak:
    container_name: mysql-keycloak
    image: mysql:8.0.31
    volumes:
      - keycloak-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME_KEYCLOAK}
      MYSQL_USER: ${DB_USERNAME_KEYCLOAK}
      MYSQL_PASSWORD: ${DB_PASSWORD_KEYCLOAK}

  keycloak:
    container_name: keycloak
    image: keycloak/keycloak:23.0
    command: ["start-dev", "--import-realm","--http-port=8181"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: ${DB_NAME_KEYCLOAK}
      DB_USER: ${DB_USERNAME_KEYCLOAK}
      DB_PASSWORD: ${DB_PASSWORD_KEYCLOAK}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8181"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - mysql-keycloak

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Eureka Server
  discovery-server:
    image: trinhtrungkien189/discovery-server:latest
    pull_policy: always
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  api-gateway:
    image: trinhtrungkien189/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    depends_on:
      - discovery-server
      - keycloak

    ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: trinhtrungkien189/product-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: trinhtrungkien189/order-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_PORT_ORDER=${DB_PORT_ORDER}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      broker:
        condition: service_started
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started
      mysql-order:
        condition: service_healthy

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: trinhtrungkien189/inventory-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_PORT_INVENTORY=${DB_PORT_INVENTORY}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      mysql-inventory:
        condition: service_healthy
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: trinhtrungkien189/notification-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - broker
      - discovery-server
      - api-gateway

volumes:
  order-service-data:
  inventory-service-data:
  keycloak-data: